;;
;; Autogenerated by Thrift Compiler (1.0.0-dev)
;;
;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
;;
;;  options string: el
;;

(require 'thrift)
(require 'thrift-gen-shared-types)
(require 'thrift-gen-shared-constants)


(defclass thrift-gen-shared-SharedService (thrift-service)
  ()
  "Generated class for the shared.SharedService service.")


(defmethod initialize-instance ((svc thrift-gen-shared-SharedService) &rest slots)
  "Create a new instance of a tutorial/Calculator service."
  ;; Init parent object
  (call-next-method)
  ;; Register helper methods
  (oset svc
	functions
	(append (oref svc functions)
		'(getStruct
		  (thrift-gen-shared-SharedService-write-getStruct
		   thrift-gen-shared-SharedService-read-getStruct-result)))))

;;
;; Here will come the definition of the processor
;;

;; HELPER FUNCTIONS AND STRUCTURES


(defun thrift-gen-shared-SharedService-write-getStruct (protocol seqid args)
  "Encode and send getStruct request."
  (thrift-protocol-writeMessageBegin protocol
				     "getStruct"
				     (thrift-constant-message-type 'call)
				     seqid)
  (thrift-protocol-writeStructBegin protocol "getStruct_args)"
  ;; Encode key
  (when (plist-get args :key)
    (thrift-protocol-writeFieldBegin protocol
				     "key"
				     (thrift-constant-type 'i32)
				     1)
    (thrift-protocol-write-i32 protocol (plist-get args :key))
    (thrift-protocol-writeFieldEnd protocol))
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol)
  (thrift-protocol-writeMessageEnd protocol)))


(defun thrift-gen-shared-SharedService-read-getStruct-result (protocol)
  "Receive and decode getStruct response."
  ;; Preset result
  (setq res-exception nil)
  (setq res-result nil)
  ;; Decode
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (cond ((equal fid 0) ; Normal return value received
	     (if (equal ftype (thrift-constant-type 'SharedStruct))
		 (setq res-result (thrift-protocol-read-SharedStruct protocol))
	       (thrift-protocol-skip protocol ftype)))
	    (t
	     (thrift-protocol-skip protocol ftype)))
      (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  (list res-error res-result))


(provide 'thrift-gen-shared-SharedService)
