;; Autogenerated by Thrift compiler (blablabla)

;; Do not edit unless you are sure that you know what you are doing

;; options string: blablabla

(require 'thrift)


(defclass thrift-client-calculator ()
  ((protocol :initarg :protocol
	     :document "Protocol to encode/decode and send/recv data.")
   (seqid    :initform 0
	     :document "The sequence ID of the client")
   (functions :initform (list
			 'ping	     '(thrift-client-calculator-ping-send
				       thrift-client-calculator-ping-recv)
			 'add	     '(thrift-client-calculator-add-send
				       thrift-client-calculator-add-recv)
			 'substracte '(thrift-client-calculator-substracte-send
				       thrift-client-calculator-substracte-recv)
			 'divide     '(thrift-client-calculator-divide-send
				       thrift-client-calculator-divide-recv))
	      :document "Functions supported by the client."))
  "Generated class for the calculator.")


;; todo: this one should be inherited from a parent class...
(defmethod thrift-client-call ((client thrift-client-calculator) function parameters handler)
  "Calls a thrift service of the client."
  ;; Build handler to call upon reception of the data of the reply
  (defun reply-data-handler ()
    (message "reply-data-handler called")
    (setq res (thrift-client-recv client))
    (funcall handler res))
  ;; Register the handler in the transport
  (oset (oref (oref client protocol) transport)
	on-data-received
	'reply-data-handler)
  ;; Write query to the protocol/transport with ad-hoc function
  (setq send-fun (car (plist-get (oref client functions) function)))
  (funcall send-fun client parameters))


;; todo: this one should be inherited from a parent class...
(defmethod thrift-client-recv ((client thrift-client-calculator))
  "Decode header of incoming reply and call associated decoder."
  (message "thrift-client-recv called")
  ;; Decode message header
  (setq header (thrift-protocol-readMessageBegin (oref client protocol)))
  (setq name (car header))
  (setq type (car (cdr header)))
  (setq seqid (car (cdr (cdr header))))
  ;; Decode result with ad-hoc decoder
  (setq recv-fun (car (cdr (plist-get (oref client functions) name))))
  (funcall send-fun client parameters))

  (setq result (funcall (plist-get (oref client functions) name) ; don't think that this will work...
			(ref client protocol)))
  (thrift-protocol-readMessageEnd (oref client protocol)))


;;; ping functions ;;;

(defmethod thrift-client-calculator-ping-send ((client thrift-client-calculator) parameters)
  "Send ping request."
  ;; Encode and send message
  (thrift-protocol-writeMessageBegin (oref client protocol)
				     "ping"
				     thrift-cst-message-type-call
				     (oref client seqid))
  (thrift-protocol-writeMessageEnd (oref client protocol)))


(defmethod thrift-client-calculator-ping-recv ((client thrift-client-calculator) handler)
  "Decode content of ping response.")
;todo: get that in elisp...

    ;; iprot.readStructBegin()
    ;; while True:
    ;;   (fname, ftype, fid) = iprot.readFieldBegin()
    ;;   if ftype == TType.STOP:
    ;;     break
    ;;   else:
    ;;     iprot.skip(ftype)
    ;;   iprot.readFieldEnd()
    ;; iprot.readStructEnd()


;;; addfunctions ;;;
;todo

;;; substract functions ;;;
;todo

;;; divide functions ;;;
;todo

(provide 'thrift-client-calculator)
