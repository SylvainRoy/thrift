;;
;; Autogenerated by Thrift Compiler (1.0.0-dev)
;;
;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
;;
;;  options string: el
;;

(require 'thrift)
(require 'thrift-gen-tutorial-ttypes)
(require 'thrift-service)


(defclass thrift-gen-tutorial-Calculator (thrift-service)
  ()
  "Generated class for the tutorial/Calculator service.")


(defmethod initialize-instance ((svc thrift-gen-tutorial-Calculator) &rest slots)
  "Create a new instance of a tutorial/Calculator service."
  ;; Init parent object
  (call-next-method)
  ;; Register helper methods
  (oset svc
	functions
	(append (oref svc functions)
		'(ping
		   (thrift-gen-tutorial-Calculator-write-ping-args
		    thrift-gen-tutorial-Calculator-read-ping-result)
		  add
		   (thrift-gen-tutorial-Calculator-write-add-args
		    thrift-gen-tutorial-Calculator-read-add-result)
		  calculate
		   (thrift-gen-tutorial-Calculator-write-calculate-args
		    thrift-gen-tutorial-Calculator-read-calculate-result)))))


(defun thrift-gen-tutorial-Calculator-write-ping-args (protocol seqid args)
  "Send ping request."
  (thrift-protocol-writeMessageBegin protocol
				     "ping"
				     (thrift-constant-message-type 'call)
				     seqid)
  (thrift-protocol-writeStructBegin protocol "ping_args")
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol)
  (thrift-protocol-writeMessageEnd protocol))


(defun thrift-gen-tutorial-Calculator-read-ping-result (protocol)
  "Decode content of ping response."
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
    (if (equal ftype (thrift-constant-type 'stop))
	(throw 'break t)
      (thrift-protocol-skip protocol ftype))
    (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  (list nil nil))


(defun thrift-gen-tutorial-Calculator-write-add-args (protocol seqid args)
  "Send add request."
  (thrift-protocol-writeMessageBegin protocol
				     "add"
				     (thrift-constant-message-type 'call)
				     seqid)
  (thrift-protocol-writeStructBegin protocol "add_args")
  ;; parameter: num2
  (when (plist-get args :num1)
    (thrift-protocol-writeFieldBegin protocol
				     "num1"
				     (thrift-constant-type 'i32)
				     1)
    (thrift-protocol-writeI32 protocol (plist-get args :num1))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: num2
  (when (plist-get args :num2)
    (thrift-protocol-writeFieldBegin protocol
				     "num2"
				     (thrift-constant-type 'i32)
				     2)
    (thrift-protocol-writeI32 protocol (plist-get args :num2))
    (thrift-protocol-writeFieldEnd protocol))
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol)
  (thrift-protocol-writeMessageEnd protocol))


(defun thrift-gen-tutorial-Calculator-read-add-result (protocol)
  "Decode content of add response."
  ;; Preset result
  (setq res-error nil)
  (setq res-result nil)
  ;; decode
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (if (equal fid 0)
	  (if (equal ftype (thrift-constant-type 'i32))
	      (setq res-result (thrift-protocol-readI32 protocol))
	    (thrift-protocol-skip protocol ftype))
	(thrift-protocol-skip protocol ftype))
      (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  (list res-error res-result))


(defun thrift-gen-tutorial-Calculator-write-calculate-args (protocol seqid args)
  "Send calculate request."
  (thrift-protocol-writeMessageBegin protocol
				     "calculate"
				     (thrift-constant-message-type 'call)
				     seqid)
  (thrift-protocol-writeStructBegin protocol "calculate_args")
  ;; parameter: logid
  (when (plist-get args :logid)
    (thrift-protocol-writeFieldBegin protocol
				     "logid"
				     (thrift-constant-type 'i32)
				     1)
    (thrift-protocol-writeI32 protocol (plist-get args :logid))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: w
  (when (plist-get args :w)
    (thrift-protocol-writeFieldBegin protocol
				     "w"
				     (thrift-constant-type 'struct)
				     2)
    (thrift-gen-tutorial-Calculator-write-Work protocol (plist-get args :w))
    (thrift-protocol-writeFieldEnd protocol))
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol)
  (thrift-protocol-writeMessageEnd protocol))


(defun thrift-gen-tutorial-Calculator-read-calculate-result (protocol)
  "Decode content of calculate response."
  ;; Preset result
  (setq res-error nil)
  (setq res-result nil)
  ;; Decode
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (cond ((equal fid 0) ; Normal result received
	     (if (equal ftype (thrift-constant-type 'i32))
		 (setq res-result (thrift-protocol-readI32 protocol))
	       (thrift-protocol-skip protocol ftype)))
	    ((equal fid 1) ; InvalidOperation exception received
	     (if (equal ftype (thrift-constant-type 'struct))
		 (setq res-error (thrift-gen-tutorial-Calculator-read-InvalidOperation protocol))
	       (thrift-protocol-skip protocol ftype)))
	    (t
	     (thrift-protocol-skip protocol ftype)))
      (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  (list res-error res-result))


(provide 'thrift-gen-tutorial-Calculator)
