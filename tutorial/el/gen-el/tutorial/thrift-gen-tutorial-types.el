;;
;; Autogenerated by Thrift compiler (1.0.0-dev)
;;
;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
;;
;; options string: el
;;

(require 'thrift)


;;
;; You can define enums, which are just 32 bit integers. Values are optional
;; and start at 1 if not supplied, C style again.
;;

(defun thrift-gen-tutorial-Operation-to-int (operation)
  (cond ((eq operation 'add)       1)
	((eq operation 'substract) 2)
	((eq operation 'multiply)  3)
	((eq operation 'divide)    4)))

(defun thrift-gen-tutorial-int-to-Operation (int)
  (cond ((eq int '1) 'add)
	((eq int '2) 'substract)
	((eq int '3) 'multiply)
	((eq int '4) 'divide)))


;;
;; Structs are the basic complex data structures. They are comprised of fields
;; which each have an integer identifier, a type, a symbolic name, and an
;; optional default value.
;;
;; Fields can be declared "optional", which ensures they will not be included
;; in the serialized output if they aren't set.  Note that this requires some
;; manual management in some languages.
;;

(defun thrift-gen-tutorial-Calculator-write-Work (protocol work)
  "Write Work struct."
  (thrift-protocol-writeStructBegin protocol "Work")
  ;; parameter: num1
  (when (plist-get work :num1)
    (thrift-protocol-writeFieldBegin protocol
				     "num1"
				     (thrift-constant-type 'i32)
				     1)
    (thrift-protocol-writeI32 protocol (plist-get work :num1))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: num2
  (when (plist-get work :num2)
    (thrift-protocol-writeFieldBegin protocol
				     "num2"
				     (thrift-constant-type 'i32)
				     2)
    (thrift-protocol-writeI32 protocol (plist-get work :num2))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: op
  (when (plist-get work :op)
    (thrift-protocol-writeFieldBegin protocol
				     "op"
				     (thrift-constant-type 'i32)
				     3)
    (message "first")
    (thrift-protocol-writeI32 protocol (thrift-gen-tutorial-Operation-to-int (plist-get work :op)))
    (message "second")
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: comment
  (when (plist-get work :comment)
    (thrift-protocol-writeFieldBegin protocol
				     "comment"
				     (thrift-constant-type 'string)
				     4)
    (thrift-protocol-writeString protocol (plist-get work :comment))
    (thrift-protocol-writeFieldEnd protocol))
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol))


;;
;; Structs can also be exceptions, if they are nasty.
;;

(defun thrift-gen-tutorial-Calculator-read-InvalidOperation (protocol)
  "Read InvalidOperation Exception."
  ;; Preset result
  (setq res-what nil)
  (setq res-why nil)
  ;; decode
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (cond ((equal fid 1)
	     (if (equal ftype (thrift-constant-type 'i32))
		 (setq res-what (thrift-protocol-readI32 protocol))
	       (thrift-protocol-skip protocol ftype)))
	    ((equal fid 2)
	     (if (equal ftype (thrift-constant-type 'string))
		 (setq res-string (thrift-protocol-readString protocol))
	       (thrift-protocol-skip protocol ftype)))
	    (t
	     (thrift-protocol-skip protocol ftype)))
      (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  (list res-what res-why))


(provide 'thrift-gen-tutorial-types)
