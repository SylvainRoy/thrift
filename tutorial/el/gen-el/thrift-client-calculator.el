;; Autogenerated by Thrift compiler (blablabla)

;; Do not edit unless you are sure that you know what you are doing

;; options string:

(require 'thrift)
(require 'thrift-base-client)


(defclass thrift-client-calculator (thrift-base-client)
  ((functions :initform (list
			 'ping       '(thrift-client-calculator-write-ping-args
				       thrift-client-calculator-read-ping-result)
			 'add        '(thrift-client-calculator-write-add-args
				       thrift-client-calculator-read-add-result)
			 'calculate  '(thrift-client-calculator-write-calculate-args
				       thrift-client-calculator-read-calculate-result))
	      :document "Helper functions for the various operations supported by the client."))
  "Generated class for the calculator.")



(defmethod thrift-client-calculator-write-ping-args ((client thrift-client-calculator) seqid parameters)
  "Send ping request."
  (setq protocol (oref client protocol))
  (thrift-protocol-writeMessageBegin protocol
				     "ping"
				     (thrift-constant-message-type 'call)
				     seqid)
  (thrift-protocol-writeStructBegin protocol "ping_args")
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol)
  (thrift-protocol-writeMessageEnd protocol))


(defmethod thrift-client-calculator-read-ping-result ((client thrift-client-calculator))
  "Decode content of ping response."
  (setq protocol (oref client protocol))
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
    (if (equal ftype (thrift-constant-type 'stop))
	(throw 'break t)
      (thrift-protocol-skip protocol ftype))
    (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  nil)


(defmethod thrift-client-calculator-write-add-args ((client thrift-client-calculator) seqid parameters)
  "Send add request."
  (setq protocol (oref client protocol))
  (thrift-protocol-writeMessageBegin protocol
				     "add"
				     (thrift-constant-message-type 'call)
				     seqid)
  (thrift-protocol-writeStructBegin protocol "add_args")
  ;; parameter: num2
  (when (nth 0 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "num1"
				     (thrift-constant-type 'i32)
				     1)
    (thrift-protocol-writeI32 protocol (nth 0 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: num2
  (when (nth 1 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "num2"
				     (thrift-constant-type 'i32)
				     2)
    (thrift-protocol-writeI32 protocol (nth 1 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol)
  (thrift-protocol-writeMessageEnd protocol))


(defmethod thrift-client-calculator-read-add-result ((client thrift-client-calculator))
  "Decode content of add response."
  ;; Preset result
  (setq res-result nil)
  ;; decode
  (setq protocol (oref client protocol))
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (if (equal fid 0)
	  (if (equal ftype (thrift-constant-type 'i32))
	      (setq res-result (thrift-protocol-readI32 protocol))
	    (thrift-protocol-skip protocol ftype))
	(thrift-protocol-skip protocol ftype))
      (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  (list res-result))


(defmethod thrift-client-calculator-write-calculate-args ((client thrift-client-calculator) seqid parameters)
  "Send calculate request."
  (setq protocol (oref client protocol))
  (thrift-protocol-writeMessageBegin protocol
				     "calculate"
				     (thrift-constant-message-type 'call)
				     seqid)
  (thrift-protocol-writeStructBegin protocol "calculate_args")
  ;; parameter: logid
  (when (nth 0 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "logid"
				     (thrift-constant-type 'i32)
				     1)
    (thrift-protocol-writeI32 protocol (nth 0 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: w
  (when (nth 1 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "w"
				     (thrift-constant-type 'struct)
				     2)
    (thrift-client-calculator-write-Work client (nth 1 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol)
  (thrift-protocol-writeMessageEnd protocol))


(defmethod thrift-client-calculator-read-calculate-result ((client thrift-client-calculator))
  "Decode content of calculate response."
  ;; Preset result
  (setq res-success nil)
  (setq res-ouch nil)
  ;; decode
  (setq protocol (oref client protocol))
  (thrift-protocol-readStructBegin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-readFieldBegin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (cond ((equal fid 0)
	     (if (equal ftype (thrift-constant-type 'i32))
		 (setq res-success (thrift-protocol-readI32 protocol))
	       (thrift-protocol-skip protocol ftype)))
	    ((equal fid 1)
	     (if (equal ftype (thrift-constant-type 'struct))
		 (setq res-ouch (thrift-client-calculator-ouch-recv client))
	       (thrift-protocol-skip protocol ftype)))
	    (t
	     (thrift-protocol-skip protocol ftype)))
      (thrift-protocol-readFieldEnd protocol)))
  (thrift-protocol-readStructEnd protocol)
  (list res-success res-ouch))


(defmethod thrift-client-calculator-write-Work ((client thrift-client-calculator) parameters)
  "Write Work struct."
  (setq protocol (oref client protocol))
  (thrift-protocol-writeStructBegin protocol "Work")
  ;; parameter: num1
  (when (nth 0 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "num1"
				     (thrift-constant-type 'i32)
				     1)
    (thrift-protocol-writeI32 protocol (nth 0 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: num2
  (when (nth 1 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "num2"
				     (thrift-constant-type 'i32)
				     2)
    (thrift-protocol-writeI32 protocol (nth 1 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  ;; parameter: op
  (when (nth 2 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "op"
				     (thrift-constant-type 'i32)
				     3)
    (thrift-protocol-writeI32 protocol (nth 2 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  (when (nth 3 parameters)
    (thrift-protocol-writeFieldBegin protocol
				     "comment"
				     (thrift-constant-type 'string)
				     4)
    (thrift-protocol-writeString protocol (nth 3 parameters))
    (thrift-protocol-writeFieldEnd protocol))
  (thrift-protocol-writeFieldStop protocol)
  (thrift-protocol-writeStructEnd protocol))



(provide 'thrift-client-calculator)
