;;
;; Autogenerated by Thrift Compiler (1.0.0-dev)
;;
;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
;;
;; options string: el
;;

(require 'thrift)
(require 'thrift-gen-shared-types)



;;
;; You can define enums, which are just 32 bit integers. Values are optional
;; and start at 1 if not supplied, C style again.
;;

(defun thrift-gen-tutorial-Operation-to-int (in)
  (cond ((eq in 'ADD) 1)
	((eq in 'SUBTRACT) 2)
	((eq in 'MULTIPLY) 3)
	((eq in 'DIVIDE) 4)))

(defun thrift-gen-tutorial-int-to-Operation (in)
  (cond ((eq in 1) 'ADD)
	((eq in 2) 'SUBTRACT)
	((eq in 3) 'MULTIPLY)
	((eq in 4) 'DIVIDE)))


(defun thrift-gen-tutorial-read-Operation (protocol)
  "Read 'Operation' enum."
  (thrift-gen-tutorial-int-to-Operation (thrift-protocol-read-i32 protocol)))

(defun thrift-gen-tutorial-write-Operation (protocol in)
  "Write 'Operation' enum."
  (thrift-protocol-write-i32 protocol
			     (thrift-gen-tutorial-Operation-to-int in)))


;;
;; Structs are the basic complex data structures. They are comprised of fields
;; which each have an integer identifier, a type, a symbolic name, and an
;; optional default value.
;;
;; Fields can be declared "optional", which ensures they will not be included
;; in the serialized output if they aren't set.  Note that this requires some
;; manual management in some languages.
;;
;; Attributes:
;;  - num1
;;  - num2
;;  - op
;;  - comment
;;

(defun thrift-gen-tutorial-read-Work (protocol)
  "Read Work struct."
  ;; Preset result
  (setq res-num1 nil)
  (setq res-num2 nil)
  (setq res-op nil)
  (setq res-comment nil)
  ;; Decode
  (thrift-protocol-read-struct-begin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-read-field-begin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (cond ((equal fid 1) ; 'num1' element
	     (if (equal ftype (thrift-constant-type 'i32))
		 (setq res-num1 (thrift-protocol-read-i32 protocol))
	       (thrift-protocol-skip protocol ftype)))
	    ((equal fid 2) ; 'num2' element
	     (if (equal ftype (thrift-constant-type 'i32))
		 (setq res-num2 (thrift-protocol-read-i32 protocol))
	       (thrift-protocol-skip protocol ftype)))
	    ((equal fid 3) ; 'op' element
	     (if (equal ftype (thrift-constant-type 'i32))
		 (setq res-op (thrift-gen-tutorial-read-Operation protocol))
	       (thrift-protocol-skip protocol ftype)))
	    ((equal fid 4) ; 'comment' element
	     (if (equal ftype (thrift-constant-type 'string))
		 (setq res-comment (thrift-protocol-read-string protocol))
	       (thrift-protocol-skip protocol ftype)))
	    (t
	     (thrift-protocol-skip protocol ftype)))
      (thrift-protocol-read-field-end protocol)))
  (thrift-protocol-read-struct-end protocol)
  (list res-num1 res-num2 res-op res-comment))


(defun thrift-gen-tutorial-write-Work (protocol in)
  "Write Work struct."
  (thrift-protocol-write-struct-begin protocol "Work")
  ;; Encode num1
  (when (plist-get in :num1)
    (thrift-protocol-write-field-begin protocol
				       "num1"
				       (thrift-constant-type 'i32)
				       1)
    (thrift-protocol-write-i32 protocol (plist-get in :num1))
    (thrift-protocol-write-field-end protocol))
  ;; Encode num2
  (when (plist-get in :num2)
    (thrift-protocol-write-field-begin protocol
				       "num2"
				       (thrift-constant-type 'i32)
				       2)
    (thrift-protocol-write-i32 protocol (plist-get in :num2))
    (thrift-protocol-write-field-end protocol))
  ;; Encode op
  (when (plist-get in :op)
    (thrift-protocol-write-field-begin protocol
				       "op"
				       (thrift-constant-type 'i32)
				       3)
    (thrift-gen-tutorial-write-Operation protocol
					 (plist-get in :op))
    (thrift-protocol-write-field-end protocol))
  ;; Encode comment
  (when (plist-get in :comment)
    (thrift-protocol-write-field-begin protocol
				       "comment"
				       (thrift-constant-type 'string)
				       4)
    (thrift-protocol-write-string protocol (plist-get in :comment))
    (thrift-protocol-write-field-end protocol))
  (thrift-protocol-write-field-stop protocol)
  (thrift-protocol-write-struct-end protocol))


;;
;; Structs can also be exceptions, if they are nasty.
;;
;; Attributes:
;;  - what
;;  - why
;;

(defun thrift-gen-tutorial-read-InvalidOperation (protocol)
  "Read InvalidOperation exception."
  ;; Preset result
  (setq res-what nil)
  (setq res-why nil)
  ;; Decode
  (thrift-protocol-read-struct-begin protocol)
  (catch 'break
    (while t
      (setq r (thrift-protocol-read-field-begin protocol))
      (setq fname (pop r))
      (setq ftype (pop r))
      (setq fid (pop r))
      (if (equal ftype (thrift-constant-type 'stop))
	  (throw 'break t))
      (cond ((equal fid 1) ; 'what' element
	     (if (equal ftype (thrift-constant-type 'i32))
		 (setq res-what (thrift-protocol-read-i32 protocol))
	       (thrift-protocol-skip protocol ftype)))
	    ((equal fid 2) ; 'why' element
	     (if (equal ftype (thrift-constant-type 'string))
		 (setq res-why (thrift-protocol-read-string protocol))
	       (thrift-protocol-skip protocol ftype)))
	    (t
	     (thrift-protocol-skip protocol ftype)))
      (thrift-protocol-read-field-end protocol)))
  (thrift-protocol-read-struct-end protocol)
  (list res-what res-why))


(defun thrift-gen-tutorial-write-InvalidOperation (protocol in)
  "Write InvalidOperation exception."
  (thrift-protocol-write-struct-begin protocol "InvalidOperation")
  ;; Encode what
  (when (plist-get in :what)
    (thrift-protocol-write-field-begin protocol
				       "what"
				       (thrift-constant-type 'i32)
				       1)
    (thrift-protocol-write-i32 protocol (plist-get in :what))
    (thrift-protocol-write-field-end protocol))
  ;; Encode why
  (when (plist-get in :why)
    (thrift-protocol-write-field-begin protocol
				       "why"
				       (thrift-constant-type 'string)
				       2)
    (thrift-protocol-write-string protocol (plist-get in :why))
    (thrift-protocol-write-field-end protocol))
  (thrift-protocol-write-field-stop protocol)
  (thrift-protocol-write-struct-end protocol))


(provide 'thrift-gen-tutorial-types)
